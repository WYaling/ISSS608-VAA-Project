[
  {
    "objectID": "Proposal/Proposal.html#influential-factors-on-hdb-resale-prices",
    "href": "Proposal/Proposal.html#influential-factors-on-hdb-resale-prices",
    "title": "How Much is Your HDB Valued?",
    "section": "4.1 Influential Factors on HDB Resale Prices",
    "text": "4.1 Influential Factors on HDB Resale Prices\nExploratory Data Analysis(EDA) via Data Visualization\nExploratory Data Analysis (EDA) is a crucial step in understanding the structure, patterns, and relationships within a dataset. Data visualization plays a significant role in EDA as it allows us to visually explore the data, identify trends, patterns, outliers, and relationships between variables. Here’s a general outline of the EDA process via data visualization for the provided dataset:\n\nData Cleaning and Preprocessing:\n\nHandle missing values: Check for missing values in each column and decide how to handle them (e.g., imputation, deletion).\nData type conversion: Ensure that data types are appropriate for analysis (e.g., converting categorical variables to categorical data type).\nCheck for duplicates: Identify and remove any duplicate records if present.\n\nUnivariate Analysis:\n\nunivariate analysis examines individual variables to understand their distributions. For numerical variables such as floor area, remaining lease, and resale price, histograms are useful to visualize their spread and skewness. Categorical variables like flat type and location can be analyzed using bar plots to show frequency counts.\n\nBivariate Analysis:\n\nScatter plots: Analyze the relationship between numerical variables like resale_price and floor_area_sqm or remaining_lease to understand if there’s any correlation.\nBox plots: Compare the distribution of resale_price across different categories like flat_type or location to identify any variations or outliers.\nHeatmaps or Correlation plots: Visualize the correlation matrix between numerical variables to identify correlations among them.\n\nPattern analysis \n\nTemporal analysis focuses on understanding trends over time. Time series plots can reveal patterns in resale prices over months, while heatmaps or line plots display variation across different time periods and locations.\nGeospatial analysis adds a spatial dimension to the exploration. Plotting resale prices on a map allows visualization of spatial distribution and identification of any regional patterns or clusters.\n\n\nThe dataset on resale flat prices based on registration date encompasses various factors that influence property resale prices. Given the complexity of the real estate market, which is subject to fluctuations influenced by factors such as economic conditions, location, and property characteristics, conducting sensitivity analysis through visualization is paramount. \nBy considering variables such as the trend in resale prices over time, the impact of location on prices, and potential outliers or influential data points, visualizing the dataset can facilitate the identification of key insights. This analysis may include examining the effects of market trends, government policies related to housing, and other socio-economic factors on resale prices. This approach enables informed decision-making for individuals considering property investment.",
    "crumbs": [
      "Proposal"
    ]
  },
  {
    "objectID": "Proposal/Proposal.html#predicting-price-trends",
    "href": "Proposal/Proposal.html#predicting-price-trends",
    "title": "How Much is Your HDB Valued?",
    "section": "4.2 Predicting Price Trends",
    "text": "4.2 Predicting Price Trends\nThrough the proposed methodology outlined below, we aim to develop accurate and reliable predictive models capable of effectively forecasting HDB resale flat prices, thus providing actionable insights to stakeholders and facilitating informed decision-making in the Singapore real estate market.\n\nData Preparation\n\nFirst, divide the available dataset into training, validation, and testing sets with a typical split of 80% for training, 10% for validation, and 10% for testing. Then, utilize feature selection techniques to identify the most influential variables affecting HDB resale flat prices, aiding in simplifying analysis and enhancing model accuracy.\n\nModel Development\n\nFirst, explore various machine learning algorithms such as regression analysis, decision trees, and ensemble methods to develop models for predicting HDB resale flat prices. Then, train the models on the training set using historical data and evaluate them using techniques like cross-validation.\n\nModel Evaluation\n\nUse metrics such as Mean Absolute Error (MAE), Root Mean Square Error (RMSE), and R-squared to evaluate the performance of predictive models.\n\nModel Interpretation\n\nFirst, analyze the interpretability of models, which is crucial for understanding the driving factors behind HDB resale flat prices. Employ techniques like feature importance analysis and partial dependence plots to interpret models and identify key insights. Then, validate predictive models using the validation set to ensure their robustness and generalization ability. Make necessary improvements or adjustments based on validation results to enhance model performance.\n\nPrediction\n\nUse validated models to forecast future trends in HDB resale flat prices. These predictions will provide valuable insights to stakeholders, enabling them to make informed decisions in the dynamic real estate market environment.",
    "crumbs": [
      "Proposal"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "How much is your HDB flat valued ?",
    "section": "",
    "text": "Exploring Influential Factors on HDB Resale Prices and Predicting Price Trends\nThis website is for showcasing group project prototype of ISSS608 Visual Analytic and Applications.\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "",
    "section": "",
    "text": "Course: ISSS608 Visual Analytics and Applications\nTask: Group Project\nTeam: Group 7\nMember: GAO Ya & WANG Yaling\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Team"
    ]
  },
  {
    "objectID": "Meeting_Minutes/Meeting_Minutes.html",
    "href": "Meeting_Minutes/Meeting_Minutes.html",
    "title": "Meeting Minutes",
    "section": "",
    "text": "Meeting Minutes 1\nMeeting Minutes 2\nMeeting Minutes 3\n\n\n\n Back to top",
    "crumbs": [
      "Meeting Minutes"
    ]
  },
  {
    "objectID": "DataPreparation.html",
    "href": "DataPreparation.html",
    "title": "Data Preparation",
    "section": "",
    "text": "R packages required:\n\nreadr: for reading in CSV files\ndplyr: for manipulating, concatenating dataframes\npurrr: for handling lists and functional programming\nnaniar: for using miss_vis() function to check data for missing values\n\n\npacman::p_load(readr, dplyr, purrr, naniar)"
  },
  {
    "objectID": "DataPreparation.html#load-packages",
    "href": "DataPreparation.html#load-packages",
    "title": "Data Preparation",
    "section": "",
    "text": "R packages required:\n\nreadr: for reading in CSV files\ndplyr: for manipulating, concatenating dataframes\npurrr: for handling lists and functional programming\nnaniar: for using miss_vis() function to check data for missing values\n\n\npacman::p_load(readr, dplyr, purrr, naniar)"
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html",
    "href": "Data_preparation/Data_Preparation.html",
    "title": "HDB Resale Dataset: Data Preparation",
    "section": "",
    "text": "The data is sourced from the Kaggle dataset “Resale HDB Flat Prices 2012 - 2023”, which comprises four CSV files as follows:\n\n\n\n\n\nThe research for this project will be limited to the recent 10 years, from 01/01/2013 to 31/12/2023. Therefore, the required data files are the following three:\n\nresale-flat-prices-based-on-registration-date-from-mar-2012-to-dec-2014.csv\nresale-flat-prices-based-on-registration-date-from-jan-2015-to-dec-2016.csv\nResaleflatpricesbasedonregistrationdatefromJan2017onwards.csv\n\n\n\n\nR packages required:\n\ntidyverse for processing datasets, inside this package we will use:\n\nreadr for reading CSV files\ndplyr for operations such as filtering, selecting, transforming, summarizing, and joining data\n\nDT for the creation of interactive HTML tables from R data frames\nsummarytools for generating a descriptive statistical summary of the data frame\n\n\npacman::p_load(tidyverse, DT, summarytools)",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#load-packages",
    "href": "Data_preparation/Data_Preparation.html#load-packages",
    "title": "Data Preparation",
    "section": "",
    "text": "R packages required:\n\ntidyverse: for processing datasets\n\nreadr: for reading CSV files\ndplyr: for operations such as filtering, selecting, transforming, summarizing, and joining data\n\nDT: for the creation of interactive HTML tables from R data frames\n\n\npacman::p_load(tidyverse, DT)",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#download-data",
    "href": "Data_preparation/Data_Preparation.html#download-data",
    "title": "HDB Resale Dataset: Data Preparation",
    "section": "",
    "text": "The data is sourced from the Kaggle dataset “Resale HDB Flat Prices 2012 - 2023”, which comprises four CSV files as follows:\n\n\n\n\n\nThe research for this project will be limited to the recent 10 years, from 01/01/2013 to 31/12/2023. Therefore, the required data files are the following three:\n\nresale-flat-prices-based-on-registration-date-from-mar-2012-to-dec-2014.csv\nresale-flat-prices-based-on-registration-date-from-jan-2015-to-dec-2016.csv\nResaleflatpricesbasedonregistrationdatefromJan2017onwards.csv",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#observation-from-the-above-glimpse",
    "href": "Data_preparation/Data_Preparation.html#observation-from-the-above-glimpse",
    "title": "Data Preparation",
    "section": "Observation from the above glimpse:",
    "text": "Observation from the above glimpse:\nIt can be observed that the dataset “mar-2012-to-dec-2014” is missing the “lease_commence_date” column, the “lease_commence_date” column in “jan-2015-to-dec-2016” is of integer data type, and the dataset “Jan-2017-onwards” is of character data type. All other columns and data types are identical across the three datasets."
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#mar-2012-to-dec-2014-1",
    "href": "Data_preparation/Data_Preparation.html#mar-2012-to-dec-2014-1",
    "title": "Data Preparation",
    "section": "mar-2012-to-dec-2014",
    "text": "mar-2012-to-dec-2014\n\nglimpse(data1)\n\nRows: 52,203\nColumns: 11\n$ month               &lt;chr&gt; \"2012-03\", \"2012-03\", \"2012-03\", \"2012-03\", \"2012-…\n$ town                &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           &lt;chr&gt; \"2 ROOM\", \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               &lt;chr&gt; \"172\", \"510\", \"610\", \"474\", \"604\", \"154\", \"110\", \"…\n$ street_name         &lt;chr&gt; \"ANG MO KIO AVE 4\", \"ANG MO KIO AVE 8\", \"ANG MO KI…\n$ storey_range        &lt;chr&gt; \"06 TO 10\", \"01 TO 05\", \"06 TO 10\", \"01 TO 05\", \"0…\n$ floor_area_sqm      &lt;dbl&gt; 45, 44, 68, 67, 67, 68, 67, 67, 67, 67, 68, 67, 68…\n$ flat_model          &lt;chr&gt; \"Improved\", \"Improved\", \"New Generation\", \"New Gen…\n$ lease_commence_date &lt;int&gt; 1986, 1980, 1980, 1984, 1980, 1981, 1978, 1979, 19…\n$ resale_price        &lt;dbl&gt; 250000, 265000, 315000, 320000, 321000, 321000, 32…\n$ remaining_lease     &lt;dbl&gt; 73, 67, 67, 71, 67, 68, 65, 66, 66, 72, 68, 67, 67…"
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#jan-2015-to-dec-2016-1",
    "href": "Data_preparation/Data_Preparation.html#jan-2015-to-dec-2016-1",
    "title": "Data Preparation",
    "section": "jan-2015-to-dec-2016",
    "text": "jan-2015-to-dec-2016\n\nglimpse(data2)\n\nRows: 37,153\nColumns: 11\n$ month               &lt;chr&gt; \"2015-01\", \"2015-01\", \"2015-01\", \"2015-01\", \"2015-…\n$ town                &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           &lt;chr&gt; \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               &lt;chr&gt; \"174\", \"541\", \"163\", \"446\", \"557\", \"603\", \"709\", \"…\n$ street_name         &lt;chr&gt; \"ANG MO KIO AVE 4\", \"ANG MO KIO AVE 10\", \"ANG MO K…\n$ storey_range        &lt;chr&gt; \"07 TO 09\", \"01 TO 03\", \"01 TO 03\", \"01 TO 03\", \"0…\n$ floor_area_sqm      &lt;dbl&gt; 60, 68, 69, 68, 68, 67, 68, 68, 67, 68, 67, 68, 68…\n$ flat_model          &lt;chr&gt; \"Improved\", \"New Generation\", \"New Generation\", \"N…\n$ lease_commence_date &lt;int&gt; 1986, 1981, 1980, 1979, 1980, 1980, 1980, 1981, 19…\n$ resale_price        &lt;dbl&gt; 255000, 275000, 285000, 290000, 290000, 290000, 29…\n$ remaining_lease     &lt;dbl&gt; 70, 65, 64, 63, 64, 64, 64, 65, 62, 69, 60, 64, 65…"
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#jan-2017-onwards-1",
    "href": "Data_preparation/Data_Preparation.html#jan-2017-onwards-1",
    "title": "Data Preparation",
    "section": "Jan-2017-onwards",
    "text": "Jan-2017-onwards\n\nglimpse(data3)\n\nRows: 169,584\nColumns: 11\n$ month               &lt;chr&gt; \"2017-01\", \"2017-01\", \"2017-01\", \"2017-01\", \"2017-…\n$ town                &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           &lt;chr&gt; \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               &lt;chr&gt; \"406\", \"108\", \"602\", \"465\", \"601\", \"150\", \"447\", \"…\n$ street_name         &lt;chr&gt; \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 4\", \"ANG MO K…\n$ storey_range        &lt;chr&gt; \"10 TO 12\", \"01 TO 03\", \"01 TO 03\", \"04 TO 06\", \"0…\n$ floor_area_sqm      &lt;dbl&gt; 44, 67, 67, 68, 67, 68, 68, 67, 68, 67, 68, 67, 67…\n$ flat_model          &lt;chr&gt; \"Improved\", \"New Generation\", \"New Generation\", \"N…\n$ lease_commence_date &lt;int&gt; 1979, 1978, 1980, 1980, 1980, 1981, 1979, 1976, 19…\n$ resale_price        &lt;dbl&gt; 232000, 250000, 262000, 265000, 265000, 275000, 28…\n$ remaining_lease     &lt;dbl&gt; 61, 60, 62, 62, 62, 63, 61, 58, 61, 61, 62, 59, 59…\n\n\n:::"
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#load-r-packages",
    "href": "Data_preparation/Data_Preparation.html#load-r-packages",
    "title": "HDB Resale Dataset: Data Preparation",
    "section": "",
    "text": "R packages required:\n\ntidyverse for processing datasets, inside this package we will use:\n\nreadr for reading CSV files\ndplyr for operations such as filtering, selecting, transforming, summarizing, and joining data\n\nDT for the creation of interactive HTML tables from R data frames\nsummarytools for generating a descriptive statistical summary of the data frame\n\n\npacman::p_load(tidyverse, DT, summarytools)",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#import-data",
    "href": "Data_preparation/Data_Preparation.html#import-data",
    "title": "HDB Resale Dataset: Data Preparation",
    "section": "2.1 Import Data",
    "text": "2.1 Import Data\nThe necessary .CSV files will be imported as a list of CSV files, then compiled into a single dataframe using R.\nFirst, let’s take a look at the three CSV files and check their difference.\n\nmar-2012-to-dec-2014jan-2015-to-dec-2016Jan-2017-onwards\n\n\n\n#read .csv data files\ndata1 &lt;- read.csv(\"data/resale-flat-prices-based-on-registration-date-from-mar-2012-to-dec-2014.csv\")\nglimpse(data1)\n\nRows: 52,203\nColumns: 10\n$ month               &lt;chr&gt; \"2012-03\", \"2012-03\", \"2012-03\", \"2012-03\", \"2012-…\n$ town                &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           &lt;chr&gt; \"2 ROOM\", \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               &lt;chr&gt; \"172\", \"510\", \"610\", \"474\", \"604\", \"154\", \"110\", \"…\n$ street_name         &lt;chr&gt; \"ANG MO KIO AVE 4\", \"ANG MO KIO AVE 8\", \"ANG MO KI…\n$ storey_range        &lt;chr&gt; \"06 TO 10\", \"01 TO 05\", \"06 TO 10\", \"01 TO 05\", \"0…\n$ floor_area_sqm      &lt;dbl&gt; 45, 44, 68, 67, 67, 68, 67, 67, 67, 67, 68, 67, 68…\n$ flat_model          &lt;chr&gt; \"Improved\", \"Improved\", \"New Generation\", \"New Gen…\n$ lease_commence_date &lt;int&gt; 1986, 1980, 1980, 1984, 1980, 1981, 1978, 1979, 19…\n$ resale_price        &lt;dbl&gt; 250000, 265000, 315000, 320000, 321000, 321000, 32…\n\n\n\n\n\n#read .csv data files\ndata2 &lt;- read.csv(\"data/resale-flat-prices-based-on-registration-date-from-jan-2015-to-dec-2016.csv\")\nglimpse(data2)\n\nRows: 37,153\nColumns: 11\n$ month               &lt;chr&gt; \"2015-01\", \"2015-01\", \"2015-01\", \"2015-01\", \"2015-…\n$ town                &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           &lt;chr&gt; \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               &lt;chr&gt; \"174\", \"541\", \"163\", \"446\", \"557\", \"603\", \"709\", \"…\n$ street_name         &lt;chr&gt; \"ANG MO KIO AVE 4\", \"ANG MO KIO AVE 10\", \"ANG MO K…\n$ storey_range        &lt;chr&gt; \"07 TO 09\", \"01 TO 03\", \"01 TO 03\", \"01 TO 03\", \"0…\n$ floor_area_sqm      &lt;dbl&gt; 60, 68, 69, 68, 68, 67, 68, 68, 67, 68, 67, 68, 68…\n$ flat_model          &lt;chr&gt; \"Improved\", \"New Generation\", \"New Generation\", \"N…\n$ lease_commence_date &lt;int&gt; 1986, 1981, 1980, 1979, 1980, 1980, 1980, 1981, 19…\n$ remaining_lease     &lt;int&gt; 70, 65, 64, 63, 64, 64, 64, 65, 62, 69, 60, 64, 65…\n$ resale_price        &lt;dbl&gt; 255000, 275000, 285000, 290000, 290000, 290000, 29…\n\n\n\n\n\n#read .csv data files\ndata3 &lt;- read.csv(\"data/ResaleflatpricesbasedonregistrationdatefromJan2017onwards.csv\")\nglimpse(data3)\n\nRows: 169,584\nColumns: 11\n$ month               &lt;chr&gt; \"2017-01\", \"2017-01\", \"2017-01\", \"2017-01\", \"2017-…\n$ town                &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           &lt;chr&gt; \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               &lt;chr&gt; \"406\", \"108\", \"602\", \"465\", \"601\", \"150\", \"447\", \"…\n$ street_name         &lt;chr&gt; \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 4\", \"ANG MO K…\n$ storey_range        &lt;chr&gt; \"10 TO 12\", \"01 TO 03\", \"01 TO 03\", \"04 TO 06\", \"0…\n$ floor_area_sqm      &lt;dbl&gt; 44, 67, 67, 68, 67, 68, 68, 67, 68, 67, 68, 67, 67…\n$ flat_model          &lt;chr&gt; \"Improved\", \"New Generation\", \"New Generation\", \"N…\n$ lease_commence_date &lt;int&gt; 1979, 1978, 1980, 1980, 1980, 1981, 1979, 1976, 19…\n$ remaining_lease     &lt;chr&gt; \"61 years 04 months\", \"60 years 07 months\", \"62 ye…\n$ resale_price        &lt;dbl&gt; 232000, 250000, 262000, 265000, 265000, 275000, 28…\n\n\n\n\n\n\nObservation from the above glimpse:\n\nThe data file “mar-2012-to-dec-2014” is missing the “remaining_lease” column.\nThe “remaining_lease” column in “jan-2015-to-dec-2016” is of integer data type.\nThe “remaining_lease” column in “Jan-2017-onwards” is of character data type.\nAll other column names and data types are identical across the three data files.",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#merge-data",
    "href": "Data_preparation/Data_Preparation.html#merge-data",
    "title": "HDB Resale Dataset: Data Preparation",
    "section": "2.2 Merge Data",
    "text": "2.2 Merge Data\nBefore merging the three data files, the following steps need to be performed:\nStep 1. Add a column named “remaining_lease” to the “mar-2012-to-dec-2014” data file.\n\n\n\n\n\n\nFormula of the column “remaining_lease”\n\n\n\nAccording to research, the tenure of Singapore HDB properties is 99 years.\nThus, the value of “remaining_lease” is calculated as 99 - (month - lease_commence_date). Note that “month” stands for the date of HDB resale in the datasets.\n\n\nStep 2. Delete the original “remaining_lease” column in “jan-2015-to-dec-2016” and “Jan-2017-onwards” data file, and create new “remaining_lease” columns with the same formula as above.\n\n# Calculate remaining lease based on the provided formula\ndata1 &lt;- data1 %&gt;%\n  mutate(remaining_lease = 99 - (as.numeric(substr(month, 1, 4)) - lease_commence_date))\n\n# delete original remaining_lease column and create a new one\ndata2 &lt;- data2 %&gt;%\n  select(-remaining_lease) %&gt;%\n  mutate(remaining_lease = 99 - (as.numeric(substr(month, 1, 4)) - lease_commence_date))\n\ndata3 &lt;- data3 %&gt;%\n  select(-remaining_lease) %&gt;%\n  mutate(remaining_lease = 99 - (as.numeric(substr(month, 1, 4)) - lease_commence_date))\n\nThen, we can start merging the three files together.\n\n# Merge data1, data2, and data3\ncombined_data &lt;- bind_rows(data1, data2, data3)",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#extract-data",
    "href": "Data_preparation/Data_Preparation.html#extract-data",
    "title": "HDB Resale Dataset: Data Preparation",
    "section": "2.3 Extract Data",
    "text": "2.3 Extract Data\nTo be able to extract the data from 2013 to 2023, we need to do the follow steps:\nStep 1. Make sure the data type of column “month” is date-type.\nStep 2. Extract data in 2013-2023.\n\n# convert data type of \"month\" column to date\ncombined_data$month &lt;- as.Date(paste0(combined_data$month, \"-01\"), format = \"%Y-%m-%d\")\n\n# Extract data in 2013-2023\nextract_data &lt;- combined_data %&gt;%\n  filter(month &gt;= as.Date(\"2013-01-01\") & month &lt;= as.Date(\"2023-12-31\"))\n\n\n\n\n\n\n\nExplanation of “-01” in the code chunk above\n\n\n\nBy examining the data, we find that the “month” variable is in the format of “Year/Month/01”, for example “2013/1/1”. For every month, the dataset uses the first day to cover all the records in that particular month, so we decided to set the day as 1 when converting to as.Date.",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#check-data-health",
    "href": "Data_preparation/Data_Preparation.html#check-data-health",
    "title": "HDB Resale Dataset: Data Preparation",
    "section": "2.4 Check Data Health",
    "text": "2.4 Check Data Health\nNow that we have a single dataframe, we first check the health of the dataframe by:\nusing glimpse() to look at the structure of the dataframe, data types of the columns, and some values of the dataframe,\nusing datatable() from the DT package to view the dataframe more interactively,\nusing duplicate() to check the dataframe for any duplicated entries using duplicate(),\nusing summary() to check the distribution of values,\nusing descr() to show the descriptive statistics of non-numerical variables.\n\nglimpse()datatable()duplicate()summary()descr()\n\n\n\nglimpse(extract_data)\n\nRows: 238,519\nColumns: 11\n$ month               &lt;date&gt; 2013-01-01, 2013-01-01, 2013-01-01, 2013-01-01, 2…\n$ town                &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           &lt;chr&gt; \"2 ROOM\", \"2 ROOM\", \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               &lt;chr&gt; \"510\", \"314\", \"323\", \"170\", \"174\", \"445\", \"607\", \"…\n$ street_name         &lt;chr&gt; \"ANG MO KIO AVE 8\", \"ANG MO KIO AVE 3\", \"ANG MO KI…\n$ storey_range        &lt;chr&gt; \"01 TO 03\", \"01 TO 03\", \"04 TO 06\", \"07 TO 09\", \"0…\n$ floor_area_sqm      &lt;dbl&gt; 44, 44, 44, 61, 60, 67, 68, 67, 68, 67, 74, 67, 68…\n$ flat_model          &lt;chr&gt; \"Improved\", \"Improved\", \"Improved\", \"Improved\", \"I…\n$ lease_commence_date &lt;int&gt; 1980, 1978, 1977, 1986, 1986, 1979, 1980, 1980, 19…\n$ resale_price        &lt;dbl&gt; 253000, 270000, 283000, 305000, 320000, 325000, 32…\n$ remaining_lease     &lt;dbl&gt; 66, 64, 63, 72, 72, 65, 66, 66, 65, 66, 66, 65, 66…\n\n\n\n\n\ndatatable(head(extract_data), \n          class= \"compact\",\n          rownames = FALSE,\n          width=\"100%\", \n          options = list(pageLength = 10,scrollX=T))\n\n\n\n\n\n\n\n\nstr(extract_data[duplicated(extract_data),])\n\n'data.frame':   610 obs. of  11 variables:\n $ month              : Date, format: \"2013-03-01\" \"2013-04-01\" ...\n $ town               : chr  \"JURONG EAST\" \"BUKIT BATOK\" \"TOA PAYOH\" \"TOA PAYOH\" ...\n $ flat_type          : chr  \"3 ROOM\" \"3 ROOM\" \"3 ROOM\" \"5 ROOM\" ...\n $ block              : chr  \"252\" \"523\" \"57\" \"81\" ...\n $ street_name        : chr  \"JURONG EAST ST 24\" \"BT BATOK ST 52\" \"LOR 5 TOA PAYOH\" \"LOR 4 TOA PAYOH\" ...\n $ storey_range       : chr  \"01 TO 03\" \"01 TO 03\" \"01 TO 03\" \"19 TO 21\" ...\n $ floor_area_sqm     : num  67 60 61 122 60 146 74 67 67 93 ...\n $ flat_model         : chr  \"New Generation\" \"Improved\" \"Standard\" \"Improved\" ...\n $ lease_commence_date: int  1985 1987 1973 1997 1986 1991 1984 1972 1979 2010 ...\n $ resale_price       : num  343000 315000 320000 880000 300000 720000 388000 292000 356000 600000 ...\n $ remaining_lease    : num  71 73 59 83 72 77 70 58 65 96 ...\n\n\n\n\n\nsummary(extract_data)\n\n     month                town            flat_type            block          \n Min.   :2013-01-01   Length:238519      Length:238519      Length:238519     \n 1st Qu.:2016-07-01   Class :character   Class :character   Class :character  \n Median :2019-05-01   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2019-01-13                                                           \n 3rd Qu.:2021-10-01                                                           \n Max.   :2023-12-01                                                           \n street_name        storey_range       floor_area_sqm    flat_model       \n Length:238519      Length:238519      Min.   : 31.00   Length:238519     \n Class :character   Class :character   1st Qu.: 76.00   Class :character  \n Mode  :character   Mode  :character   Median : 94.00   Mode  :character  \n                                       Mean   : 96.99                     \n                                       3rd Qu.:112.00                     \n                                       Max.   :280.00                     \n lease_commence_date  resale_price     remaining_lease\n Min.   :1966        Min.   : 140000   Min.   :42.00  \n 1st Qu.:1984        1st Qu.: 360000   1st Qu.:64.00  \n Median :1993        Median : 447000   Median :74.00  \n Mean   :1994        Mean   : 478311   Mean   :74.66  \n 3rd Qu.:2003        3rd Qu.: 563000   3rd Qu.:85.00  \n Max.   :2022        Max.   :1500000   Max.   :98.00  \n\n\n\n\n\ndescr(extract_data)\n\nNon-numerical variable(s) ignored: month, town, flat_type, block, street_name, storey_range, flat_model\n\n\nDescriptive Statistics  \nextract_data  \nN: 238519  \n\n                    floor_area_sqm   lease_commence_date   remaining_lease   resale_price\n----------------- ---------------- --------------------- ----------------- --------------\n             Mean            96.99               1994.22             74.66      478310.91\n          Std.Dev            24.17                 13.32             12.97      160952.26\n              Min            31.00               1966.00             42.00      140000.00\n               Q1            76.00               1984.00             64.00      360000.00\n           Median            94.00               1993.00             74.00      447000.00\n               Q3           112.00               2003.00             85.00      563000.00\n              Max           280.00               2022.00             98.00     1500000.00\n              MAD            26.69                 13.34             14.83      143812.20\n              IQR            36.00                 19.00             21.00      203000.00\n               CV             0.25                  0.01              0.17           0.34\n         Skewness             0.28                  0.18              0.02           1.04\n      SE.Skewness             0.01                  0.01              0.01           0.01\n         Kurtosis            -0.11                 -0.98             -1.04           1.28\n          N.Valid        238519.00             238519.00         238519.00      238519.00\n        Pct.Valid           100.00                100.00            100.00         100.00\n\n\n\n\n\n\nObservation from the above:\n\nFrom glimpse(), we can see the data types of all variables. There are four numerical variables: floor_area_sqm, lease_commence_date, resale_price, remaining_lease. Seven categorical variables: month, town, flat_type, block, street_name, storey_range, flat_model. Variable town, flat_type, block, street_name, storey_range, flat_model are all character-type.\nFrom glimpse(), we can see that there are a total of 238,519 rows and 11 columns. Combining the Length of categorical variables seen in summary() and the N.Valid from descr() for numerical variables, we find that each variable has 238,519 values, indicating that there are no missing values in this dataframe.\nFrom duplicate(), we can see that there are 610 records have duplicate rows. We speculate that it is caused by duplicate data entry.\n\n\nAfter the above observations, we are going to process the data to make it more suitable for our subsequent analysis.\nStep 1. Convert all character-type variables to factor-type variables so that we can analyze the distribution of the different values of categorical variables in subsequent analyses.\n\n# Convert all character-type variables to factor-type variables.\nextract_data &lt;- as.data.frame(lapply(extract_data, function(x) {\n  if(is.character(x)) {\n    return(factor(x))\n  } else {\n    return(x)\n  }\n}))\n\nStep 2. Remove all the duplicate rows.\n\nextract_data &lt;- distinct(extract_data)\n\nCheck duplicates again by the code chunk below:\n\nstr(extract_data[duplicated(extract_data),])\n\n'data.frame':   0 obs. of  11 variables:\n $ month              : 'Date' num(0) \n $ town               : Factor w/ 26 levels \"ANG MO KIO\",\"BEDOK\",..: \n $ flat_type          : Factor w/ 7 levels \"1 ROOM\",\"2 ROOM\",..: \n $ block              : Factor w/ 2699 levels \"1\",\"10\",\"100\",..: \n $ street_name        : Factor w/ 567 levels \"ADMIRALTY DR\",..: \n $ storey_range       : Factor w/ 17 levels \"01 TO 03\",\"04 TO 06\",..: \n $ floor_area_sqm     : num \n $ flat_model         : Factor w/ 21 levels \"2-room\",\"3Gen\",..: \n $ lease_commence_date: int \n $ resale_price       : num \n $ remaining_lease    : num",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "EDA/EDA.html",
    "href": "EDA/EDA.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Load R packages\npacman::p_load(tidyverse, ggplot2, plotly, treemap, DT, RColorBrewer)",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "EDA/EDA.html#data-preparation",
    "href": "EDA/EDA.html#data-preparation",
    "title": "Exploratory Data Analysis",
    "section": "1.1 Data Preparation",
    "text": "1.1 Data Preparation\nThe data is sourced from the Kaggle dataset titled “Resale Prices of HDB flats from 2012 to 2023.” Through collaborative efforts, our team has completed the data preparation phase. For further details, please visit: link to data preparation. Going forward, I will provide a brief overview of the cleaned dataset.\nThe following graph shows how we get a new data file from the kaggle dataset.\n\nAfter the above step, we performed data inspection and cleaning, changed the data types of categorical variables, and removed duplicate rows. At the end of the data cleaning process, we saved the data file as resale_hdb.rds. Now, let’s take a brief look at the cleaned dataset.\n\n#Check the dataset\ndata &lt;- read_rds(\"data/resale_hdb.rds\")\nglimpse(data)\n\nRows: 237,909\nColumns: 11\n$ month               &lt;date&gt; 2013-01-01, 2013-01-01, 2013-01-01, 2013-01-01, 2…\n$ town                &lt;fct&gt; ANG MO KIO, ANG MO KIO, ANG MO KIO, ANG MO KIO, AN…\n$ flat_type           &lt;fct&gt; 2 ROOM, 2 ROOM, 2 ROOM, 3 ROOM, 3 ROOM, 3 ROOM, 3 …\n$ block               &lt;fct&gt; 510, 314, 323, 170, 174, 445, 607, 535, 449, 602, …\n$ street_name         &lt;fct&gt; ANG MO KIO AVE 8, ANG MO KIO AVE 3, ANG MO KIO AVE…\n$ storey_range        &lt;fct&gt; 01 TO 03, 01 TO 03, 04 TO 06, 07 TO 09, 01 TO 03, …\n$ floor_area_sqm      &lt;dbl&gt; 44, 44, 44, 61, 60, 67, 68, 67, 68, 67, 74, 67, 68…\n$ flat_model          &lt;fct&gt; Improved, Improved, Improved, Improved, Improved, …\n$ lease_commence_date &lt;int&gt; 1980, 1978, 1977, 1986, 1986, 1979, 1980, 1980, 19…\n$ resale_price        &lt;dbl&gt; 253000, 270000, 283000, 305000, 320000, 325000, 32…\n$ remaining_lease     &lt;dbl&gt; 66, 64, 63, 72, 72, 65, 66, 66, 65, 66, 66, 65, 66…\n\n\nFrom the above output, we can see that the dataset we are going to analyze contains 237,909 HDB resale records, including 11 variables. Among them, there are:\n\n4 numerical variables: floor_area_sqm, lease_commence_date, resale_price, remaining_lease;\n7 categorical variables: month, town, flat_type, block, street_name, storey_range, flat_model.\n\nLet’s see how many unique values in each variable.\n\n#Count unique values of each variable\nunique_counts &lt;- sapply(data, function(x) length(unique(x)))\ndata.frame(Unique_Values_Count = unique_counts)\n\n                    Unique_Values_Count\nmonth                               132\ntown                                 26\nflat_type                             7\nblock                              2699\nstreet_name                         567\nstorey_range                         17\nfloor_area_sqm                      176\nflat_model                           21\nlease_commence_date                  56\nresale_price                       4219\nremaining_lease                      57\n\n\nNow, I will introduce the definitions of each variable to facilitate your understanding.",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "EDA/EDA.html#objective-of-the-report",
    "href": "EDA/EDA.html#objective-of-the-report",
    "title": "Exploratory Data Analysis",
    "section": "1.2 Objective of The Report",
    "text": "1.2 Objective of The Report\n\n\nThis report will provide a detailed exposition of the following sections of the group project:\n\nExploratory Data Analysis.\n\nUnivariate analysis: aiming to assist users to understand the quantity and distribution of resale HDB properties through different variable.\nBivariate analysis: aiming to assist users to understand the driving factors of the resale price through visualizations.\n\nClustering.\n\nThis report will offer UI design for each section in the Shiny App.",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "EDA/EDA.html#univariate-analysis",
    "href": "EDA/EDA.html#univariate-analysis",
    "title": "Exploratory Data Analysis",
    "section": "2.1 Univariate Analysis",
    "text": "2.1 Univariate Analysis\n\n2.1.1 Preparation\nFirst of all, let’s identify variables suitable for univariate analysis and find appropriate charts for them. The following chart illustrates how I select suitable variables for univariate analysis and the optimal chart I will use to present to users.\n\n\n\n\n\n\n\n2.1.2 Chart Creation\nWe can utilize different R packages to create different types of plots.\n\nggplot, for line charts, histograms, and violin plots;\nplotly, for making plots interactive.\n\nNow, I will showcase examples of the source code for creating different types of charts.\n\nLine-chartHistogramViolin Plot\n\n\n\n#Univariate Analysis: by month\n\n# group data by month and count quantity for each month\ndata_summarized &lt;- data %&gt;%\n  group_by(month) %&gt;%\n  summarise(quantity = n())\n\n# create plotly figure\nfig &lt;- plot_ly(data_summarized, x = ~month, y = ~quantity, type = \"scatter\", mode = \"lines+markers\",\n               line = list(color = \"blue\", width = 0.3),\n               marker = list(color = \"red\", size = 3))\n\n# add range slider and customize layout\nfig &lt;- fig %&gt;%\n  layout(title = \"Resale Quantity by Month (2013-2023)\",\n         xaxis = list(title = \"Month in Year\",\n                      rangeslider = list(visible = TRUE),\n                      tickformat = \"%Y-%m\",\n                      tickangle = 60,\n                      tickfont = list(size = 6)),\n         yaxis = list(title = \"Quantity\",\n                      tickmode = \"linear\",\n                      tick0 = 0,\n                      dtick = 500))\n\n# display the plot\nfig\n\n\n\n\n\n\n\n\n# Univariate Analysis: by town\n\n# Sort the quantity of HDB resale transaction in different towns from high to low using fct_reorder.\ndata$town &lt;- fct_reorder(data$town, data$town, function(x) -length(x))\n\n# create a histogram by town\np3 &lt;- ggplot(data, aes(x = town)) +\n  geom_bar(fill = \"steelblue\", color = \"black\", alpha = 0.5) +  # Changed geom_histogram to geom_bar\n  labs(title = \"Resale Quantity by town (2013-2023)\", x = \"town\", y = \"Quantity\") +\n  theme(axis.text.x = element_text(size = 6, angle = 60, vjust = 0.5)) \n\nggplotly(p3)\n\n\n\n\n\n\n\n\n#Univariate Analysis: by remaining_lease\n\np3 &lt;- ggplot(data, aes(x = \"\", y = remaining_lease)) +\n  geom_boxplot(color = \"blue\") +\n  geom_violin(fill = \"forestgreen\", color = \"forestgreen\", alpha = 0.3) +\n  stat_summary(fun = \"mean\", geom = \"point\", shape = 18, size = 4, color = \"red\", position = position_dodge(width = 0.75)) +\n  labs(title = \"Violin Plot of Remaining Lease  (2013-2023) (Red dot: Mean Value)\", y = \"Remaining Lease\", x=\"\") \n\nggplotly(p3)\n\n\n\n\n\n\n\n\n\n\n2.1.3 UI Design\nIn the Shiny app, we will design a feature where users can freely select a variable, view its visualization, and simultaneously see either the count summary or descriptive statistics of that variable.\nThe demo is as follows:",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "EDA/EDA.html#bivariate-analysis",
    "href": "EDA/EDA.html#bivariate-analysis",
    "title": "Exploratory Data Analysis",
    "section": "2.2 Bivariate Analysis",
    "text": "2.2 Bivariate Analysis\n\n2.2.1 Preparation\nFirst of all, let’s identify variables suitable for univariate analysis and find appropriate charts for them. The following chart illustrates how I select suitable variables for univariate analysis and the optimal chart I will use to present to users.\n\n\n\n\n\nFrom the image above, it’s apparent that “month” stands out as a unique variable becaue of its chart type . I will create a separate box for it to display the results in Shiny. Other variables can be represented using box plots, treemaps, and heatmaps. Below, I will illustrate the process of creating visualizations for “month”, categorical variables, and numerical variables.\n\n\n2.2.2 Chart Creation\nWe can utilize different R packages to create different types of plots.\n\nggplot, for line charts, histograms, and density plots;\nplotly, for making plots interactive.\n\nNow, I will showcase examples of the source code for creating different types of charts.\n\nMonth\n\nLine ChartBoxplot\n\n\n\n#Bivariate Analysis: resale price by month\n\n# Group the data by month and calculate the median resale price for each month.\nmedian_data &lt;- aggregate(resale_price ~ month, data = data, FUN = median)\n\n# Create a plotly figure\nfig &lt;- plot_ly(median_data, x = ~month, y = ~resale_price, type = \"scatter\", mode = \"lines+markers\",\n               line = list(color = \"blue\", width = 0.3),\n               marker = list(color = \"red\", size = 3))\n\n# Add range slider\nfig &lt;- fig %&gt;%\n  layout(title = \"Median Resale Price by Month (2013-2023)\",\n         xaxis = list(title = \"Month\", rangeslider = list(visible = TRUE)),\n         yaxis = list(title = \"Median Resale Price\"))\n\n# Display the plot\nfig\n\n\n\n\n\n\n\n\n# Convert the month column to a date format and extract the month\ndata$month &lt;- as.Date(paste0(data$month, \"-01\"))\ndata$month_group &lt;- format(data$month, \"%Y-%m\")\n\n# Group the data by month and calculate the median resale price for each month\nmedian_prices &lt;- data %&gt;%\n  group_by(month_group) %&gt;%\n  summarise(median_price = median(resale_price))\n\n# Create the boxplot\np &lt;- ggplot(data, aes(x = month_group, y = resale_price)) +\n  geom_boxplot(fill = \"steelblue\", color = \"grey30\", alpha = 0.5) +\n  geom_line(data = median_prices, aes(x = month_group, y = median_price, group = 1), color = \"red\", size = 0.5) +\n  labs(\n    title = \"Resale Price by Month (2013-2023)\",\n    x = \"Month\", \n    y = \"Resale Price\"\n  ) +\n  theme_dark() +\n  theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5), legend.position = \"none\") +\n  scale_x_discrete(labels = function(x) substr(x, 1, 7)) # Display only the year and month\n\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nCategorical Variable:\nCategorical variables will be plotted are town, flat_type, storey_range, flat_model. I will take town as an example here.\n\nTreemapBoxplotHeatmap\n\n\n\n# Prepare the data for treemap\ntreemap_data &lt;- data %&gt;%\n  group_by(town) %&gt;%\n  summarise(count = n(), median_resale_price = median(resale_price))\n\n# Create the basic treemap\ntreemap(\n  treemap_data,\n  index = \"town\",\n  vSize = \"count\",\n  vColor = \"median_resale_price\",\n  type = \"value\",\n  bg.labels = \"white\",\n  align.labels = list(c(\"center\", \"center\"), c(\"right\", \"bottom\")),\n  title = \"Treemap of Median Resale Price by town  (2013-2023)\",\n  title.legend = \"Median Resale Price\",\n  fontsize.labels = 12\n)\n\n\n\n\n\n\n\n\n\n\n\n# Bivariate Analysis: resale price by town\n\n# Calculate median resale price for each town\nmedian_prices &lt;- data %&gt;%\n  group_by(town) %&gt;%\n  summarise(median_price = median(resale_price))\n\n# Reorder the levels of the town variable based on the median resale price\ndata$town &lt;- factor(data$town, levels = median_prices$town[order(median_prices$median_price)])\n\np &lt;- ggplot(data, aes(x = town, y = resale_price, fill = town)) +\n  geom_boxplot(color = \"black\", alpha = 0.8) +\n  scale_fill_viridis_d(name = \"town\", option = \"plasma\") +\n  labs(title = \"Boxplot of Resale Price by town  (2013-2023) (sorted by median)\", x = \"town\", y = \"Resale Price\") +\n  theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5), legend.position = \"none\")\nggplotly(p)\n\n\n\n\n\n\n\n\n# Create the heat map\np &lt;- ggplot(data, aes(x = town, y = resale_price)) +\n  geom_bin2d(binwidth = c(5, 10000)) +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\") +\n  labs(\n    title = \"Heatmap of Resale Price by town (2013-2023)\",\n    x = \"town\",\n    y = \"Resale Price\"\n  ) +\n  theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5))\n\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nNumerical Variable\nNumerical variables will be plotted are floor_area_sqm, lease_commence_date, remaining_lease. I will take floor_area_sqm as an example here.\n\nTreemapBoxplotHeatmap\n\n\n\n# Create bins for floor area\ndata$floor_area_bins &lt;- cut(data$floor_area_sqm, breaks = seq(0, max(data$floor_area_sqm), by = 10))\n\n# Calculate median resale price and count for each floor area bin\ntreemap_data &lt;- data %&gt;%\n  group_by(floor_area_bins) %&gt;%\n  summarise(\n    median_price = median(resale_price),\n    count = n()\n  )\n\n# Create the treemap\ntreemap(\n  treemap_data,\n  index = \"floor_area_bins\",\n  vSize = \"count\",\n  vColor = \"median_price\",\n  type = \"value\",\n  title = \"Treemap of Median Resale Price by floor_area_sqm (2013-2023)\",\n  title.legend = \"Median Resale Price\",\n  bg.labels = \"white\",\n  fontsize.labels = 12,\n  align.labels = list(\n    c(\"center\", \"center\"),\n    c(\"right\", \"bottom\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n# Create bins for floor area\ndata$floor_area_bins &lt;- cut(data$floor_area_sqm, breaks = seq(0, max(data$floor_area_sqm), by = 10))\n\n# Calculate median resale price for each floor area bin\nmedian_prices &lt;- data %&gt;%\n  group_by(floor_area_bins) %&gt;%\n  summarise(median_price = median(resale_price))\n\n# Reorder the levels of the floor area bins based on the median resale price\ndata$floor_area_bins &lt;- factor(data$floor_area_bins, levels = median_prices$floor_area_bins[order(median_prices$median_price)])\n\n# Create the box plot using ggplot2\np &lt;- ggplot(data, aes(x = floor_area_bins, y = resale_price, fill = floor_area_bins)) +\n  geom_boxplot(color = \"black\", alpha = 0.8) +\n  scale_fill_viridis_d(name = \"Floor Area (sqm)\", option = \"plasma\") +\n  labs(\n    title = \"Boxplot of Resale Price by floor_area_sqm (2013-2023) (sorted by median)\",\n    x = \"floor_area_sqm\",\n    y = \"Resale Price\"\n  ) +\n  theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5), legend.position = \"none\")\nggplotly(p)\n\n\n\n\n\n\n\n\n# Create the heatmap\np &lt;- ggplot(data, aes(x = floor_area_sqm, y = resale_price)) +\n  geom_bin2d(binwidth = c(5, 10000)) +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\", name = \"Count\") +\n  scale_x_continuous(breaks = seq(0, max(data$floor_area_sqm), by = 10)) +\n  labs(\n    title = \"Heatmap of Resale Price by floor_area_sqm (2013-2023)\",\n    x = \"floor_area_sqm\",\n    y = \"Resale Price\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),legend.position = \"right\")\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n\n2.2.3 UI Design\nIn the Shiny app, we will design a feature where users can freely select a variable, then visualize bivariate analysis to see how the variable influences resale price.\nThe demo is as follows:",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "EDA/EDA.html#check-missing-value",
    "href": "EDA/EDA.html#check-missing-value",
    "title": "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "3.1 Check Missing Value",
    "text": "3.1 Check Missing Value\n\n# read the data\ndata &lt;- readRDS(\"data/resale_hdb.rds\")\n\n# check for missing values\nmissing_values &lt;- colSums(is.na(data))\n\n# print the result\nprint(missing_values)\n\n              month                town           flat_type               block \n                  0                   0                   0                   0 \n        street_name        storey_range      floor_area_sqm          flat_model \n                  0                   0                   0                   0 \nlease_commence_date        resale_price     remaining_lease \n                  0                   0                   0 \n\n\nFrom above output, we can see that there is no missing value in the data set.",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "EDA/EDA.html#remove-outliers",
    "href": "EDA/EDA.html#remove-outliers",
    "title": "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "3.2 Remove Outliers",
    "text": "3.2 Remove Outliers\n\n# Use boxplot to check outliers\ndata &lt;- readRDS(\"data/resale_hdb.rds\")\n# Get names of numeric columns (assumed to be continuous variables)\ncontinuous_vars &lt;- names(Filter(is.numeric, data))\n# Generate boxplot for all continuous variables\nboxplot(data[continuous_vars],cex.axis=0.7)\n\n\n\n\n\n\n\n\nThe result shows many outliers in resale_price, now let’s remove them.\n\n# define a function to remove the outliers\nremove_outliers &lt;- function(x, na.rm = TRUE, ...) {\n  qnt &lt;- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)\n  H &lt;- 1.5 * IQR(x, na.rm = na.rm)\n  y &lt;- x\n  y[x &lt; (qnt[1] - H)] &lt;- NA\n  y[x &gt; (qnt[2] + H)] &lt;- NA\n  y\n}\n\ncolumns_to_remove_outliers &lt;- c(\"resale_price\") \n\nfor (col in columns_to_remove_outliers) {\n  data[[col]] &lt;- remove_outliers(data[[col]])\n}\n\n# check boxplot after removal\nboxplot(data[continuous_vars],cex.axis=0.7)\n\n\n\n\n\n\n\n\nYou can see that there are still some outliers in the resale_price. Let’s remove them again.\n\nfor (col in columns_to_remove_outliers) {\n  data[[col]] &lt;- remove_outliers(data[[col]])\n}\n\n# check boxplot after removal\nboxplot(data[continuous_vars],cex.axis=0.7)\n\n\n\n\n\n\n\n\nNow we assure that there are no more outliers in any of the continuous variables in the dataset.",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "EDA/EDA.html#feature-selection",
    "href": "EDA/EDA.html#feature-selection",
    "title": "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "3.3 Feature Selection",
    "text": "3.3 Feature Selection\nWe will select appropriate variables for ease of clustering analysis and determine whether they need to be encoded in advance, as follows:\n\n\n\n\n\nFrom the above, the variables we have selected are: town, flat_type, storey_range, flat_model, floor_area_sqm, lease_commence_date, and remaining_lease. Among these, categorical variables such as town, flat_type, storey_range, and flat_model need to be encoded first.",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "EDA/EDA.html#encoding",
    "href": "EDA/EDA.html#encoding",
    "title": "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "3.4 Encoding",
    "text": "3.4 Encoding\nSince the variables we need to encode have many categories, we can use frequency encoding to replace each category with its frequency of occurrence. This approach helps retain some information about the categories without introducing too many new features.\n\n# Define the frequency encoding function\nfrequency_encoding &lt;- function(data, variable) {\n  variable_name &lt;- deparse(substitute(variable))\n  \n  # Calculate the frequency of each category\n  freq_table &lt;- data %&gt;%\n    group_by(!!sym(variable_name)) %&gt;%\n    summarise(freq = n()) %&gt;%\n    arrange(freq)\n  \n  # Create the encoding mapping with class values\n  encoding_map &lt;- freq_table %&gt;%\n    mutate(!!paste0(variable_name, \"_freq_encoding\") := row_number(),\n           !!paste0(variable_name, \"_class\") := !!sym(variable_name))\n  \n  # Merge the encoding mapping with the original data\n  data &lt;- data %&gt;%\n    left_join(encoding_map, by = variable_name)\n  \n  return(data)\n}\n\n# Apply frequency encoding to specified variables\ndata &lt;- frequency_encoding(data, town)\ndata &lt;- frequency_encoding(data, flat_type)\ndata &lt;- frequency_encoding(data, storey_range)\ndata &lt;- frequency_encoding(data, flat_model)\n\n#remove NA.\ndata &lt;- na.omit(data)\n\nglimpse(data)\n\nRows: 229,338\nColumns: 23\n$ month                      &lt;date&gt; 2013-01-01, 2013-01-01, 2013-01-01, 2013-0…\n$ town                       &lt;fct&gt; ANG MO KIO, ANG MO KIO, ANG MO KIO, ANG MO …\n$ flat_type                  &lt;fct&gt; 2 ROOM, 2 ROOM, 2 ROOM, 3 ROOM, 3 ROOM, 3 R…\n$ block                      &lt;fct&gt; 510, 314, 323, 170, 174, 445, 607, 535, 449…\n$ street_name                &lt;fct&gt; ANG MO KIO AVE 8, ANG MO KIO AVE 3, ANG MO …\n$ storey_range               &lt;fct&gt; 01 TO 03, 01 TO 03, 04 TO 06, 07 TO 09, 01 …\n$ floor_area_sqm             &lt;dbl&gt; 44, 44, 44, 61, 60, 67, 68, 67, 68, 67, 74,…\n$ flat_model                 &lt;fct&gt; Improved, Improved, Improved, Improved, Imp…\n$ lease_commence_date        &lt;int&gt; 1980, 1978, 1977, 1986, 1986, 1979, 1980, 1…\n$ resale_price               &lt;dbl&gt; 253000, 270000, 283000, 305000, 320000, 325…\n$ remaining_lease            &lt;dbl&gt; 66, 64, 63, 72, 72, 65, 66, 66, 65, 66, 66,…\n$ freq.x                     &lt;int&gt; 10438, 10438, 10438, 10438, 10438, 10438, 1…\n$ town_freq_encoding         &lt;int&gt; 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,…\n$ town_class                 &lt;fct&gt; ANG MO KIO, ANG MO KIO, ANG MO KIO, ANG MO …\n$ freq.y                     &lt;int&gt; 3585, 3585, 3585, 59644, 59644, 59644, 5964…\n$ flat_type_freq_encoding    &lt;int&gt; 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6…\n$ flat_type_class            &lt;fct&gt; 2 ROOM, 2 ROOM, 2 ROOM, 3 ROOM, 3 ROOM, 3 R…\n$ freq.x.x                   &lt;int&gt; 43305, 43305, 55755, 50769, 43305, 55755, 5…\n$ storey_range_freq_encoding &lt;int&gt; 14, 14, 17, 16, 14, 17, 17, 14, 17, 17, 14,…\n$ storey_range_class         &lt;fct&gt; 01 TO 03, 01 TO 03, 04 TO 06, 07 TO 09, 01 …\n$ freq.y.y                   &lt;int&gt; 59487, 59487, 59487, 59487, 59487, 33405, 3…\n$ flat_model_freq_encoding   &lt;int&gt; 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19,…\n$ flat_model_class           &lt;fct&gt; Improved, Improved, Improved, Improved, Imp…\n\n\nNow, we have selected the variables to be used for clustering: floor_area_sqm, lease_commence_date, resale_price, remaining_lease, town_freq_encoding, flat_type_freq_encoding, storey_range_freq_encoding, and flat_model_freq_encoding.\n\n#select variables for clustering\ndata_cl &lt;- data %&gt;%\n  select(floor_area_sqm, lease_commence_date, resale_price, remaining_lease, town_freq_encoding, flat_type_freq_encoding, storey_range_freq_encoding, flat_model_freq_encoding)\n\n#data scaling\ndata_cl &lt;- scale(data_cl)\n\ndatatable(head(data_cl))",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "EDA/EDA.html#k-means-clustering",
    "href": "EDA/EDA.html#k-means-clustering",
    "title": "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "3.5 K-means Clustering",
    "text": "3.5 K-means Clustering\n\n3.5.1 Doing K-means Clustering\n\n# doing K-means clustering\nkmeans_result &lt;- kmeans(data_cl, centers = 5, nstart = 5)  #users can change centers and nstarts in shiny app. here use 5 as an example. \n\n# add result to original dataframe\ndata$km_cluster &lt;- kmeans_result$cluster\n\ncl_result &lt;- data %&gt;%\n  select(month, town, flat_type, storey_range, floor_area_sqm, flat_model, lease_commence_date, resale_price, remaining_lease, km_cluster)\n\ndatatable(head(cl_result))\n\n\n\n\n\n\n\n3.5.2 BIC & AIC\n\n# Calculate BIC and AIC\nn &lt;- nrow(data_cl)\np &lt;- length(kmeans_result$centers) * (ncol(data_cl) - 1)\n\nBIC &lt;- round(n * log(kmeans_result$tot.withinss / n) + p * log(n))\nAIC &lt;- round(kmeans_result$tot.withinss + 2 * p)\n\nprint(paste(\"BIC:\", BIC))\n\n[1] \"BIC: 323432\"\n\nprint(paste(\"AIC:\", AIC))\n\n[1] \"AIC: 926131\"\n\n\n\n\n3.5.3 Visualize the Result\n\nCluster Propotion\n\n# count data points of each cluster\ncluster_counts &lt;- data.frame(table(data$km_cluster))\ncolnames(cluster_counts) &lt;- c(\"Cluster\", \"Count\")\n\n# create an interactive pie chart to visualize the result\nplot_ly(cluster_counts, labels = ~Cluster, values = ~Count, \n        type = 'pie', textposition = 'inside', textinfo = 'percent',\n        insidetextfont = list(color = '#FFFFFF'),\n        hoverinfo = 'text',\n        text = ~paste('Cluster:', Cluster, '&lt;br&gt;Count:', Count),\n        marker = list(colors = brewer.pal(length(unique(cluster_counts$Cluster)), \"Set1\"),\n                      line = list(color = '#FFFFFF', width = 1)),\n        showlegend = FALSE) %&gt;%\n  layout(title = 'Percentage of Data in Cluster',\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n\n\n\n\n\n\n\nCluster Charactistic\n\n# Bin continuous variables\ndata$floor_area_sqm_bin &lt;- cut(data$floor_area_sqm, breaks = seq(0, max(data$floor_area_sqm), by = 10), include.lowest = TRUE, right = FALSE)\ndata$lease_commence_date_bin &lt;- cut(data$lease_commence_date, breaks = seq(min(data$lease_commence_date), max(data$lease_commence_date), by = 10), include.lowest = TRUE, right = FALSE)\ndata$remaining_lease_bin &lt;- cut(data$remaining_lease, breaks = seq(0, max(data$remaining_lease), by = 10), include.lowest = TRUE, right = FALSE)\n\ndata$resale_price_bin &lt;- cut(data$resale_price, \n                             breaks = seq(min(data$resale_price), max(data$resale_price), by = 100000),\n                             include.lowest = TRUE, right = FALSE)\n\n\n# Define variables to plot\nvariables_to_plot &lt;- c(\"town\", \"flat_type\", \"storey_range\", \"flat_model\", \"floor_area_sqm_bin\", \"lease_commence_date_bin\", \"remaining_lease_bin\", \"resale_price_bin\")\n\n# Create subplot function\ncreate_subplot &lt;- function(variable) {\n  # Filter out missing values\n  data_filtered &lt;- data %&gt;%\n    filter(!is.na(get(variable)))\n  \n  # Calculate count of each category in each cluster\n  count_by_cluster_category &lt;- data_filtered %&gt;%\n    group_by(km_cluster, !!sym(variable)) %&gt;%\n    summarise(count = n(), .groups = \"drop\")\n  \n  # Calculate proportion of each category in each cluster\n  proportion_by_cluster_category &lt;- count_by_cluster_category %&gt;%\n    group_by(km_cluster) %&gt;%\n    mutate(proportion = count / sum(count))\n  \n  plot_ly(proportion_by_cluster_category, \n        x = ~factor(km_cluster), \n        y = ~proportion, \n        color = as.formula(paste0(\"~\", variable)),\n        type = \"bar\", \n        text = ~paste(\"&lt;b&gt;\", variable, \"&lt;/b&gt;&lt;br&gt;\",\n                      format(get(variable), scientific = FALSE), \": \", round(proportion * 100, 2), \"%\"),\n        hoverinfo = \"text\", \n        name = variable) %&gt;%\n  layout(title = paste(\"Proportion of\", variable, \"in Each Cluster\"),\n         xaxis = list(title = variable),\n         yaxis = list(title = \"Proportion\"),\n         barmode = \"stack\",\n         showlegend = TRUE,\n         hovermode = \"x unified\",\n         font = list(size = 8))\n\n \n}\n\n# Create subplots\nsubplots &lt;- lapply(variables_to_plot, create_subplot)\n\n# Combine subplots\nsubplot(subplots, nrows = 1,  shareX= TRUE, shareY = TRUE) %&gt;% \n  layout(title = \"Cluster Composition\", showlegend = FALSE)\n\n\n\n\n\n\n\nCluster Charactistic Individual\n\n# Calculate the count of each town in each cluster\ndata_count &lt;- data %&gt;%\n  group_by(km_cluster, flat_type) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\n# Calculate the proportion of each town in each cluster\ndata_prop &lt;- data_count %&gt;%\n  group_by(km_cluster) %&gt;%\n  mutate(proportion = count / sum(count))\n\n# Create an interactive stacked bar plot\nplot_ly(data_prop, x = ~factor(km_cluster), y = ~proportion, color = ~flat_type, \n        type = \"bar\", text = ~paste0(flat_type, \": \", round(proportion * 100, 2), \"%\"),\n        hoverinfo = \"text\") %&gt;%\n  layout(title = \"Proportion of Towns in Each Cluster\",\n         xaxis = list(title = \"Cluster\"),\n         yaxis = list(title = \"Proportion\"),\n         barmode = \"stack\",\n         legend = list(title = list(text = \"Town\")),\n         hovermode = \"x unified\") %&gt;%\n  config(displayModeBar = TRUE, modeBarButtonsToRemove = c(\"sendDataToCloud\", \"lasso2d\", \"select2d\", \"autoScale2d\"))",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "EDA/EDA.html#ui-design-2",
    "href": "EDA/EDA.html#ui-design-2",
    "title": "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "3.6 UI design",
    "text": "3.6 UI design\nIn Shiny app, this part will be designed as follows:",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "Clustering/Clustering.html",
    "href": "Clustering/Clustering.html",
    "title": "Clustering",
    "section": "",
    "text": "Load R packages\npacman::p_load(tidyverse, ggplot2, plotly, DT, RColorBrewer)\n\n\n\n1 Check Missing Value\n\n# read the data\ndata &lt;- readRDS(\"data/resale_hdb.rds\")\n\n# check for missing values\nmissing_values &lt;- colSums(is.na(data))\n\n# print the result\nprint(missing_values)\n\n              month                town           flat_type               block \n                  0                   0                   0                   0 \n        street_name        storey_range      floor_area_sqm          flat_model \n                  0                   0                   0                   0 \nlease_commence_date        resale_price     remaining_lease \n                  0                   0                   0 \n\n\nFrom above output, we can see that there is no missing value in the data set.\n\n\n2 Remove Outliers\n\n# Use boxplot to check outliers\ndata &lt;- readRDS(\"data/resale_hdb.rds\")\n# Get names of numeric columns (assumed to be continuous variables)\ncontinuous_vars &lt;- names(Filter(is.numeric, data))\n# Generate boxplot for all continuous variables\nboxplot(data[continuous_vars],cex.axis=0.7)\n\n\n\n\n\n\n\n\nThe result shows many outliers in resale_price, now let’s remove them.\n\n# define a function to remove the outliers\nremove_outliers &lt;- function(x, na.rm = TRUE, ...) {\n  qnt &lt;- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)\n  H &lt;- 1.5 * IQR(x, na.rm = na.rm)\n  y &lt;- x\n  y[x &lt; (qnt[1] - H)] &lt;- NA\n  y[x &gt; (qnt[2] + H)] &lt;- NA\n  y\n}\n\ncolumns_to_remove_outliers &lt;- c(\"resale_price\") \n\nfor (col in columns_to_remove_outliers) {\n  data[[col]] &lt;- remove_outliers(data[[col]])\n}\n\n# check boxplot after removal\nboxplot(data[continuous_vars],cex.axis=0.7)\n\n\n\n\n\n\n\n\nYou can see that there are still some outliers in the resale_price. Let’s remove them again.\n\nfor (col in columns_to_remove_outliers) {\n  data[[col]] &lt;- remove_outliers(data[[col]])\n}\n\n# check boxplot after removal\nboxplot(data[continuous_vars],cex.axis=0.7)\n\n\n\n\n\n\n\n\nNow we assure that there are no more outliers in any of the continuous variables in the dataset.\n\n\n3 Feature Selection\nWe will select appropriate variables for ease of clustering analysis and determine whether they need to be encoded in advance, as follows:\n\n\n\n\n\nFrom the above, the variables we have selected are: town, flat_type, storey_range, flat_model, floor_area_sqm, lease_commence_date, and remaining_lease. Among these, categorical variables such as town, flat_type, storey_range, and flat_model need to be encoded first.\n\n\n4 Encoding\nSince the variables we need to encode have many categories, we can use frequency encoding to replace each category with its frequency of occurrence. This approach helps retain some information about the categories without introducing too many new features.\n\n# Define the frequency encoding function\nfrequency_encoding &lt;- function(data, variable) {\n  variable_name &lt;- deparse(substitute(variable))\n  \n  # Calculate the frequency of each category\n  freq_table &lt;- data %&gt;%\n    group_by(!!sym(variable_name)) %&gt;%\n    summarise(freq = n()) %&gt;%\n    arrange(freq)\n  \n  # Create the encoding mapping with class values\n  encoding_map &lt;- freq_table %&gt;%\n    mutate(!!paste0(variable_name, \"_freq_encoding\") := row_number(),\n           !!paste0(variable_name, \"_class\") := !!sym(variable_name))\n  \n  # Merge the encoding mapping with the original data\n  data &lt;- data %&gt;%\n    left_join(encoding_map, by = variable_name)\n  \n  return(data)\n}\n\n# Apply frequency encoding to specified variables\ndata &lt;- frequency_encoding(data, town)\ndata &lt;- frequency_encoding(data, flat_type)\ndata &lt;- frequency_encoding(data, storey_range)\ndata &lt;- frequency_encoding(data, flat_model)\n\n#remove NA.\ndata &lt;- na.omit(data)\n\nglimpse(data)\n\nRows: 229,338\nColumns: 23\n$ month                      &lt;date&gt; 2013-01-01, 2013-01-01, 2013-01-01, 2013-0…\n$ town                       &lt;fct&gt; ANG MO KIO, ANG MO KIO, ANG MO KIO, ANG MO …\n$ flat_type                  &lt;fct&gt; 2 ROOM, 2 ROOM, 2 ROOM, 3 ROOM, 3 ROOM, 3 R…\n$ block                      &lt;fct&gt; 510, 314, 323, 170, 174, 445, 607, 535, 449…\n$ street_name                &lt;fct&gt; ANG MO KIO AVE 8, ANG MO KIO AVE 3, ANG MO …\n$ storey_range               &lt;fct&gt; 01 TO 03, 01 TO 03, 04 TO 06, 07 TO 09, 01 …\n$ floor_area_sqm             &lt;dbl&gt; 44, 44, 44, 61, 60, 67, 68, 67, 68, 67, 74,…\n$ flat_model                 &lt;fct&gt; Improved, Improved, Improved, Improved, Imp…\n$ lease_commence_date        &lt;int&gt; 1980, 1978, 1977, 1986, 1986, 1979, 1980, 1…\n$ resale_price               &lt;dbl&gt; 253000, 270000, 283000, 305000, 320000, 325…\n$ remaining_lease            &lt;dbl&gt; 66, 64, 63, 72, 72, 65, 66, 66, 65, 66, 66,…\n$ freq.x                     &lt;int&gt; 10438, 10438, 10438, 10438, 10438, 10438, 1…\n$ town_freq_encoding         &lt;int&gt; 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,…\n$ town_class                 &lt;fct&gt; ANG MO KIO, ANG MO KIO, ANG MO KIO, ANG MO …\n$ freq.y                     &lt;int&gt; 3585, 3585, 3585, 59644, 59644, 59644, 5964…\n$ flat_type_freq_encoding    &lt;int&gt; 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6…\n$ flat_type_class            &lt;fct&gt; 2 ROOM, 2 ROOM, 2 ROOM, 3 ROOM, 3 ROOM, 3 R…\n$ freq.x.x                   &lt;int&gt; 43305, 43305, 55755, 50769, 43305, 55755, 5…\n$ storey_range_freq_encoding &lt;int&gt; 14, 14, 17, 16, 14, 17, 17, 14, 17, 17, 14,…\n$ storey_range_class         &lt;fct&gt; 01 TO 03, 01 TO 03, 04 TO 06, 07 TO 09, 01 …\n$ freq.y.y                   &lt;int&gt; 59487, 59487, 59487, 59487, 59487, 33405, 3…\n$ flat_model_freq_encoding   &lt;int&gt; 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19,…\n$ flat_model_class           &lt;fct&gt; Improved, Improved, Improved, Improved, Imp…\n\n\nNow, we have selected the variables to be used for clustering: floor_area_sqm, lease_commence_date, resale_price, remaining_lease, town_freq_encoding, flat_type_freq_encoding, storey_range_freq_encoding, and flat_model_freq_encoding.\n\n#select variables for clustering\ndata_cl &lt;- data %&gt;%\n  select(floor_area_sqm, lease_commence_date, resale_price, remaining_lease, town_freq_encoding, flat_type_freq_encoding, storey_range_freq_encoding, flat_model_freq_encoding)\n\n#data scaling\ndata_cl &lt;- scale(data_cl)\n\ndatatable(head(data_cl))\n\n\n\n\n\n\n\n5 K-means Clustering\n\n\n5.1 Doing K-means Clustering\n\n# doing K-means clustering\nkmeans_result &lt;- kmeans(data_cl, centers = 5, nstart = 5)  #users can change centers and nstarts in shiny app. here use 5 as an example. \n\n# add result to original dataframe\ndata$km_cluster &lt;- kmeans_result$cluster\n\ncl_result &lt;- data %&gt;%\n  select(month, town, flat_type, storey_range, floor_area_sqm, flat_model, lease_commence_date, resale_price, remaining_lease, km_cluster)\n\ndatatable(head(cl_result))\n\n\n\n\n\n\n\n5.2 BIC & AIC\n\n# Calculate BIC and AIC\nn &lt;- nrow(data_cl)\np &lt;- length(kmeans_result$centers) * (ncol(data_cl) - 1)\n\nBIC &lt;- round(n * log(kmeans_result$tot.withinss / n) + p * log(n))\nAIC &lt;- round(kmeans_result$tot.withinss + 2 * p)\n\nprint(paste(\"BIC:\", BIC))\n\n[1] \"BIC: 329771\"\n\nprint(paste(\"AIC:\", AIC))\n\n[1] \"AIC: 952071\"\n\n\n\n\n5.3 Visualize the Result\n\nCluster Propotion\n\n# count data points of each cluster\ncluster_counts &lt;- data.frame(table(data$km_cluster))\ncolnames(cluster_counts) &lt;- c(\"Cluster\", \"Count\")\n\n# create an interactive pie chart to visualize the result\nplot_ly(cluster_counts, labels = ~Cluster, values = ~Count, \n        type = 'pie', textposition = 'inside', textinfo = 'percent',\n        insidetextfont = list(color = '#FFFFFF'),\n        hoverinfo = 'text',\n        text = ~paste('Cluster:', Cluster, '&lt;br&gt;Count:', Count),\n        marker = list(colors = brewer.pal(length(unique(cluster_counts$Cluster)), \"Set1\"),\n                      line = list(color = '#FFFFFF', width = 1)),\n        showlegend = FALSE) %&gt;%\n  layout(title = 'Percentage of Data in Cluster',\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n\n\n\n\n\n\n\nCluster Charactistic\n\n# Bin continuous variables\ndata$floor_area_sqm_bin &lt;- cut(data$floor_area_sqm, breaks = seq(0, max(data$floor_area_sqm), by = 10), include.lowest = TRUE, right = FALSE)\ndata$lease_commence_date_bin &lt;- cut(data$lease_commence_date, breaks = seq(min(data$lease_commence_date), max(data$lease_commence_date), by = 10), include.lowest = TRUE, right = FALSE)\ndata$remaining_lease_bin &lt;- cut(data$remaining_lease, breaks = seq(0, max(data$remaining_lease), by = 10), include.lowest = TRUE, right = FALSE)\n\ndata$resale_price_bin &lt;- cut(data$resale_price, \n                             breaks = seq(min(data$resale_price), max(data$resale_price), by = 100000),\n                             include.lowest = TRUE, right = FALSE)\n\n\n# Define variables to plot\nvariables_to_plot &lt;- c(\"town\", \"flat_type\", \"storey_range\", \"flat_model\", \"floor_area_sqm_bin\", \"lease_commence_date_bin\", \"remaining_lease_bin\", \"resale_price_bin\")\n\n# Create subplot function\ncreate_subplot &lt;- function(variable) {\n  # Filter out missing values\n  data_filtered &lt;- data %&gt;%\n    filter(!is.na(get(variable)))\n  \n  # Calculate count of each category in each cluster\n  count_by_cluster_category &lt;- data_filtered %&gt;%\n    group_by(km_cluster, !!sym(variable)) %&gt;%\n    summarise(count = n(), .groups = \"drop\")\n  \n  # Calculate proportion of each category in each cluster\n  proportion_by_cluster_category &lt;- count_by_cluster_category %&gt;%\n    group_by(km_cluster) %&gt;%\n    mutate(proportion = count / sum(count))\n  \n  plot_ly(proportion_by_cluster_category, \n        x = ~factor(km_cluster), \n        y = ~proportion, \n        color = as.formula(paste0(\"~\", variable)),\n        type = \"bar\", \n        text = ~paste(\"&lt;b&gt;\", variable, \"&lt;/b&gt;&lt;br&gt;\",\n                      format(get(variable), scientific = FALSE), \": \", round(proportion * 100, 2), \"%\"),\n        hoverinfo = \"text\", \n        name = variable) %&gt;%\n  layout(title = paste(\"Proportion of\", variable, \"in Each Cluster\"),\n         xaxis = list(title = variable),\n         yaxis = list(title = \"Proportion\"),\n         barmode = \"stack\",\n         showlegend = TRUE,\n         hovermode = \"x unified\",\n         font = list(size = 8))\n\n \n}\n\n# Create subplots\nsubplots &lt;- lapply(variables_to_plot, create_subplot)\n\n# Combine subplots\nsubplot(subplots, nrows = 1,  shareX= TRUE, shareY = TRUE) %&gt;% \n  layout(title = \"Cluster Composition\", showlegend = FALSE)\n\n\n\n\n\n\n\nCluster Charactistic Individual\n\n# Calculate the count of each town in each cluster\ndata_count &lt;- data %&gt;%\n  group_by(km_cluster, flat_type) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\n# Calculate the proportion of each town in each cluster\ndata_prop &lt;- data_count %&gt;%\n  group_by(km_cluster) %&gt;%\n  mutate(proportion = count / sum(count))\n\n# Create an interactive stacked bar plot\nplot_ly(data_prop, x = ~factor(km_cluster), y = ~proportion, color = ~flat_type, \n        type = \"bar\", text = ~paste0(flat_type, \": \", round(proportion * 100, 2), \"%\"),\n        hoverinfo = \"text\") %&gt;%\n  layout(title = \"Proportion of Towns in Each Cluster\",\n         xaxis = list(title = \"Cluster\"),\n         yaxis = list(title = \"Proportion\"),\n         barmode = \"stack\",\n         legend = list(title = list(text = \"Town\")),\n         hovermode = \"x unified\") %&gt;%\n  config(displayModeBar = TRUE, modeBarButtonsToRemove = c(\"sendDataToCloud\", \"lasso2d\", \"select2d\", \"autoScale2d\"))\n\n\n\n\n\n\n\n\n6 UI design\nIn Shiny app, this part will be designed as follows:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Clustering"
    ]
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#extract-data-of-year-2023",
    "href": "Data_preparation/Data_Preparation.html#extract-data-of-year-2023",
    "title": "HDB Resale Dataset: Data Preparation",
    "section": "4.1 extract data of year 2023",
    "text": "4.1 extract data of year 2023\nFirstly, extract data from the year 2023 for predictive modeling, and exclude some variables to prevent the dataset from containing too many variables after subsequent one-hot encoding, which could lead to increased model complexity and computational burden.\n\ndata &lt;- subset(extract_data[format(extract_data$month, \"%Y\") == \"2023\", ], select = -c(block, street_name, month, lease_commence_date))",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#handling-variable-names",
    "href": "Data_preparation/Data_Preparation.html#handling-variable-names",
    "title": "HDB Resale Dataset: Data Preparation",
    "section": "4.2 Handling Variable Names",
    "text": "4.2 Handling Variable Names\n\n# 1.Handling Variable Names\n\nreplace_special_chars &lt;- function(x) {\n  gsub(\"[^A-Za-z0-9]\", \"_\", x)\n}\n\nfactor_cols &lt;- sapply(data, is.factor)\n\ndata[, factor_cols] &lt;- lapply(data[, factor_cols], replace_special_chars)",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "Data_preparation/Data_Preparation.html#one-hot-encoding-categorical-variables",
    "href": "Data_preparation/Data_Preparation.html#one-hot-encoding-categorical-variables",
    "title": "HDB Resale Dataset: Data Preparation",
    "section": "2. One-Hot Encoding Categorical Variables",
    "text": "2. One-Hot Encoding Categorical Variables\n\n# 2. One-Hot Encoding Categorical Variables\ndata &lt;- model.matrix(~ . - 1, data = data)\n\ndata &lt;- as.data.frame(data)\ndata$resale_price &lt;- log(data$resale_price)\n\n\nglimpse(data)\n\nRows: 25,758\nColumns: 70\n$ townANG_MO_KIO                   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ townBEDOK                        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townBISHAN                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townBUKIT_BATOK                  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townBUKIT_MERAH                  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townBUKIT_PANJANG                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townBUKIT_TIMAH                  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townCENTRAL_AREA                 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townCHOA_CHU_KANG                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townCLEMENTI                     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townGEYLANG                      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townHOUGANG                      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townJURONG_EAST                  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townJURONG_WEST                  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townKALLANG_WHAMPOA              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townMARINE_PARADE                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townPASIR_RIS                    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townPUNGGOL                      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townQUEENSTOWN                   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townSEMBAWANG                    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townSENGKANG                     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townSERANGOON                    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townTAMPINES                     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townTOA_PAYOH                    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townWOODLANDS                    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ townYISHUN                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_type2_ROOM                  &lt;dbl&gt; 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_type3_ROOM                  &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1…\n$ flat_type4_ROOM                  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_type5_ROOM                  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_typeEXECUTIVE               &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_typeMULTI_GENERATION        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range04_TO_06             &lt;dbl&gt; 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1…\n$ storey_range07_TO_09             &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0…\n$ storey_range10_TO_12             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range13_TO_15             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range16_TO_18             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range19_TO_21             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range22_TO_24             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range25_TO_27             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0…\n$ storey_range28_TO_30             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range31_TO_33             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range34_TO_36             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range37_TO_39             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range40_TO_42             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range43_TO_45             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range46_TO_48             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_range49_TO_51             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ floor_area_sqm                   &lt;dbl&gt; 44, 49, 44, 44, 45, 67, 70, 67, 73, 7…\n$ flat_model3Gen                   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelAdjoined_flat          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelApartment              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelDBSS                   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelImproved               &lt;dbl&gt; 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelImproved_Maisonette    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelMaisonette             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelModel_A                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0…\n$ flat_modelModel_A_Maisonette     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelModel_A2               &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelMulti_Generation       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelNew_Generation         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1…\n$ flat_modelPremium_Apartment      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelPremium_Apartment_Loft &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelSimplified             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelStandard               &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelTerrace                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelType_S1                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flat_modelType_S2                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ resale_price                     &lt;dbl&gt; 12.49500, 12.61154, 12.54254, 12.5496…\n$ remaining_lease                  &lt;dbl&gt; 55, 53, 54, 54, 62, 54, 88, 54, 53, 5…\n\n\n\n#write_rds(data, \"data/data_model.rds\")",
    "crumbs": [
      "Data Preparation"
    ]
  }
]